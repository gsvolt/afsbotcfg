#
# {{ ansible_managed }}
#
# OpenAFS Buildbot Master Configuration
#

{% macro builder_name(b) -%}
{{ b.scheduler }}-{{ b.branch }}-{{ b.os }}-{{ b.cc }}-{{ b.arch }}{% if b.flavor is defined %}-{{ b.flavor }}{% endif %}
{%- endmacro %}

import datetime

from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import util
from buildbot.plugins import worker
from buildbot.reporters.generators.worker import WorkerMissingGenerator

import afsbotcfg.factory
import afsbotcfg.gerrit
import afsbotcfg.master
import afsbotcfg.schedulers

BuildmasterConfig = {
    'title': '{{ afsbotcfg_project.title }}',
    'titleURL':  '{{ afsbotcfg_project.url }}',
    'buildbotURL': '{{ afsbotcfg_project.url }}',
    'buildbotNetUsageData': None,
    'db': {
        'db_url': '{{ afsbotcfg_project.db_url }}',
    },
    'configurators': [
        util.JanitorConfigurator(
            logHorizon=datetime.timedelta(weeks={{ afsbotcfg_project.janitor.log_horizon }}),
            dayOfWeek={{ afsbotcfg_project.janitor.day_of_week }},
            hour={{ afsbotcfg_project.janitor.hour }}),
    ],
    'www': {
        'port': {{ afsbotcfg_project.www_port }},
        'auth': util.UserPasswordAuth([
{% for admin in afsbotcfg_admin_passwords %}
            ('{{ admin[0] }}', '{{ admin[1] }}'),
{% endfor %}
        ]),
        'authz': util.Authz(
            allowRules=[util.AnyControlEndpointMatcher(role='admins')],
            roleMatchers=[
                util.RolesFromEmails(admins=[
{% for admin in afsbotcfg_admin_passwords %}
                    '{{ admin[0] }}',
{% endfor %}
                ])]),
        'plugins': {
            'waterfall_view': {},
            'console_view': {},
            'grid_view': {},
        },
    },
    'change_source': [
{% if afsbotcfg_gerrit is defined %}
        changes.GerritChangeSource(
            gerritserver='{{ afsbotcfg_gerrit.server }}',
            gerritport={{ afsbotcfg_gerrit.ssh_port }},
            username='{{ afsbotcfg_gerrit.user }}',
            identity_file='{{ afsbotcfg_master_home }}/.ssh/{{ afsbotcfg_gerrit.ident | basename }}',
            debug=False),
{% endif %}
    ],
    'services': [
{% if afsbotcfg_project.title != 'Molecule Test' %}
{% if afsbotcfg_gerrit is defined %}
        reporters.GerritStatusPush(
            server='{{ afsbotcfg_gerrit.server }}',
            username='{{ afsbotcfg_gerrit.user }}',
            port={{ afsbotcfg_gerrit.ssh_port }},
            identity_file='{{ afsbotcfg_master_home }}/.ssh/{{ afsbotcfg_gerrit.ident | basename }}',
            summaryCB=afsbotcfg.gerrit.summaryCB,
            summaryArg=('{{ afsbotcfg_project.summary_title }}', '{{ afsbotcfg_project.url }}'),
        ),
{% endif %}
        reporters.MailNotifier(
            fromaddr='{{ afsbotcfg_project.email_from }}',
            generators=[WorkerMissingGenerator(workers='all')],
        ),
{% endif %}
    ],
    'protocols': {
        'pb': {
            'port': {{ afsbotcfg_project.pb_port | d(9989) }},
        }
    },
    'workers': [
{% for name in afsbotcfg_workers %}
{%   set properties = lookup('file', 'workers/' + name + '/properties.yml') | from_yaml %}
{%   set password = lookup('unvault', 'workers/' + name + '/password.txt') | trim  %}
        worker.Worker('{{ name }}', '{{ password }}', notify_on_missing='{{ properties.notify }}'),
{% endfor %}
    ],
    'builders': [
{% for builder in afsbotcfg_builders %}
        util.BuilderConfig(
            name='{{ builder_name(builder) }}',
{%   if builder.workers is defined %}
            workernames=[
{%     for worker in builder.workers %}
                '{{worker}}',
{%     endfor %}
            ],
{%   else %}
            workernames=['{{builder.worker}}'],
{%   endif %}
            canStartBuild=util.enforceChosenWorker,
{%     if builder.factory.env is defined %}
            env={
{%       for key, value in builder.factory.env.items() %}
              '{{ key }}': '{{ value }}',
{%       endfor %}
            },
{%     endif %}
            factory=afsbotcfg.factory.{{ builder.factory.name | d('UnixBuild') }}(
{%     if afsbotcfg_project.repo is defined %}
                repo='{{ afsbotcfg_project.repo }}',
{%     endif %}
{%     if builder.scheduler == 'gerrit' %}
                start_delay={{ afsbotcfg_project.start_delay }},
{%     endif %}
{%     if builder.factory.args is defined %}
{%       for key, value in builder.factory.args.items() %}
                {{ key }}='{{ value }}',
{%       endfor %}
{%     endif %}
            ),
        ),
{% endfor %}
    ],
    'schedulers': [
        # Nightly schedulers.
{% for branch in afsbotcfg_project.branches %}
{%   set name = afsbotcfg_project.branches[branch] %}
{%   set hour = afsbotcfg_project.nightly[branch] %}
        schedulers.Nightly(
            name='nightly-{{ branch }}',
            change_filter=util.ChangeFilter(branch='{{ name }}'),
            builderNames=[
{%   for builder in afsbotcfg_builders %}
{%     if builder.scheduler == 'nightly' and builder.branch == branch %}
                '{{ builder_name(builder) }}',
{%     endif %}
{%   endfor %}
            ],
            hour={{ hour }},
            minute=20,
        ),
{% endfor %}

        # Gerrit schedulers.
{% for branch in afsbotcfg_project.branches | d({'dev': 'master'}) %}
        schedulers.SingleBranchScheduler(
            name='gerrit-{{ branch }}',
            change_filter=util.GerritChangeFilter(
                project='{{ afsbotcfg_project.name }}',
                branch='{{ afsbotcfg_project.branches[branch] }}',
                eventtype='patchset-created',
            ),
            treeStableTimer=None,  # Schedule immediately to avoid dropping changes.
            builderNames=[
{%   for builder in afsbotcfg_builders %}
{%     if builder.scheduler == 'gerrit' and builder.branch == branch %}
                '{{ builder_name(builder) }}',
{%     endif %}
{%   endfor %}
            ],
        ),
{% endfor %}
{% if afsbotcfg_gerrit is defined %}
        # Gerrit force scheduler.
        afsbotcfg.schedulers.GerritForceScheduler(
            name='Force gerrit build',
            gerritserver='{{ afsbotcfg_gerrit.server }}',
            gerritport={{ afsbotcfg_gerrit.ssh_port }},
            username='{{ afsbotcfg_gerrit.user }}',
            identity_file='{{ afsbotcfg_master_home }}/.ssh/{{ afsbotcfg_gerrit.ident | basename }}',
            gerriturl='{{ afsbotcfg_gerrit.url }}/#/c/%%(changenumber)s/%%(patchsetnumber)s',
            branchbuilders={
{%   for branch in afsbotcfg_project.branches | d({'dev': 'master'}) %}
                '{{ afsbotcfg_project.branches[branch] }}': [
{%     for builder in afsbotcfg_builders %}
{%       if builder.scheduler == 'gerrit' and builder.branch == branch %}
                    '{{ builder_name(builder) }}',
{%       endif %}
{%     endfor %}
                ],
{%   endfor %}
            }),
{% endif %}

        # Force schedulers.
{% for builder in afsbotcfg_builders %}
{%   if builder.workers is defined %}
        afsbotcfg.schedulers.Force('{{ builder_name(builder) }}', [
{%     for worker in builder.workers %}
            '{{ worker }}',
{%     endfor %}
        ]),
{%   else %}
        afsbotcfg.schedulers.Force('{{ builder_name(builder) }}', ['{{ builder.worker }}']),
{%   endif %}
{% endfor %}
    ],
}

# Work-around stale twisted.pid files.
afsbotcfg.master.write_pid()
